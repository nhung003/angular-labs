export * from 'jsonwebtoken';
import jwt from "jsonwebtoken";

interface Options {
    sign?: jwt.SignOptions;
    verify?: jwt.VerifyOptions;
}

type Token = string;

export class JWT<T extends string | object | Buffer> {
    protected signOptions: jwt.SignOptions = {};
    protected verifyOptions: jwt.VerifyOptions = {};
    constructor(private secretOrPrivateKey: jwt.Secret, options?: Options) {
        if (options?.sign) this.signOptions = options.sign;
        if (options?.verify) this.verifyOptions = options.verify;
    }
    sign(payload: T, signOptions?: jwt.SignOptions) {
        return new Promise<Token>((res, rej) => jwt.sign(
            payload,
            this.secretOrPrivateKey,
            Object.assign(this.signOptions, signOptions),
            (error, encoded) => {
                error ? rej(error) : res(encoded as string);
            })
        );
    }
    verify(token: Token, verifyOptions?: jwt.VerifyOptions) {
        return new Promise<T>((res, rej) => jwt.verify(
            token,
            this.secretOrPrivateKey,
            Object.assign(this.verifyOptions, verifyOptions),
            (err, decode) => {
                err ? rej(err) : res(decode as T);
            })
        );
    }
}