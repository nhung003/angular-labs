"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JWT = void 0;
__exportStar(require("jsonwebtoken"), exports);
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
class JWT {
    constructor(secretOrPrivateKey, options) {
        this.secretOrPrivateKey = secretOrPrivateKey;
        this.signOptions = {};
        this.verifyOptions = {};
        if (options === null || options === void 0 ? void 0 : options.sign)
            this.signOptions = options.sign;
        if (options === null || options === void 0 ? void 0 : options.verify)
            this.verifyOptions = options.verify;
    }
    sign(payload, signOptions) {
        return new Promise((res, rej) => jsonwebtoken_1.default.sign(payload, this.secretOrPrivateKey, Object.assign(this.signOptions, signOptions), (error, encoded) => {
            error ? rej(error) : res(encoded);
        }));
    }
    verify(token, verifyOptions) {
        return new Promise((res, rej) => jsonwebtoken_1.default.verify(token, this.secretOrPrivateKey, Object.assign(this.verifyOptions, verifyOptions), (err, decode) => {
            err ? rej(err) : res(decode);
        }));
    }
}
exports.JWT = JWT;
